/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.CensusFeature', null, global);
goog.exportSymbol('proto.CensusRequest', null, global);
goog.exportSymbol('proto.CensusResolution', null, global);
goog.exportSymbol('proto.CensusResponse', null, global);
goog.exportSymbol('proto.ComparisonOperator', null, global);
goog.exportSymbol('proto.CompoundRequest', null, global);
goog.exportSymbol('proto.CompoundResponse', null, global);
goog.exportSymbol('proto.DatasetEntry', null, global);
goog.exportSymbol('proto.DatasetRequest', null, global);
goog.exportSymbol('proto.DatasetRequest.Dataset', null, global);
goog.exportSymbol('proto.DatasetResponse', null, global);
goog.exportSymbol('proto.Decade', null, global);
goog.exportSymbol('proto.IntraDatasetOp', null, global);
goog.exportSymbol('proto.JoinOperator', null, global);
goog.exportSymbol('proto.OsmRequest', null, global);
goog.exportSymbol('proto.OsmRequest.Dataset', null, global);
goog.exportSymbol('proto.OsmRequest.OsmRequestParam', null, global);
goog.exportSymbol('proto.OsmResponse', null, global);
goog.exportSymbol('proto.Predicate', null, global);
goog.exportSymbol('proto.Predicate.ComparisonOperator', null, global);
goog.exportSymbol('proto.Query', null, global);
goog.exportSymbol('proto.SVIRequest', null, global);
goog.exportSymbol('proto.SVIRequest.Type', null, global);
goog.exportSymbol('proto.SVIResponse', null, global);
goog.exportSymbol('proto.SpatialOp', null, global);
goog.exportSymbol('proto.TargetedCensusRequest', null, global);
goog.exportSymbol('proto.TargetedCensusResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SVIRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SVIRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SVIRequest.displayName = 'proto.SVIRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SVIRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SVIRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SVIRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SVIRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SVIRequest}
 */
proto.SVIRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SVIRequest;
  return proto.SVIRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SVIRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SVIRequest}
 */
proto.SVIRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SVIRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SVIRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SVIRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SVIRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};


/**
 * @enum {number}
 */
proto.SVIRequest.Type = {
  PERCENT_POVERTY: 0,
  PERCENT_UNEMPLOYED: 1,
  PER_CAPITA_INCOME: 2,
  PERCENT_NO_HIGH_SCHOOL_DIPLOMA: 3,
  PERCENT_65_OR_OLDER: 4,
  PERCENT_17_OR_YOUNGER: 5,
  PERCENT_DISABILITY: 6,
  PERCENT_HOUSEHOLDER: 7,
  PERCENT_MINORITY: 8,
  PERCENT_SPEAKS_ENGLISH: 9,
  PERCENT_MULTI_UNIT_STRUCTURE: 10,
  PERCENT_MOBILE_HOME: 11,
  CROWDING: 12,
  NO_VEHICLE_AVAILABLE: 13,
  PERCENT_GROUP_QUARTERS: 14
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SVIResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SVIResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SVIResponse.displayName = 'proto.SVIResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SVIResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.SVIResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SVIResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SVIResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SVIResponse}
 */
proto.SVIResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SVIResponse;
  return proto.SVIResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SVIResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SVIResponse}
 */
proto.SVIResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsegeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SVIResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SVIResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SVIResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SVIResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsegeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.SVIResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SVIResponse.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseGeoJson = 2;
 * @return {string}
 */
proto.SVIResponse.prototype.getResponsegeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.SVIResponse.prototype.setResponsegeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DatasetRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DatasetRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DatasetRequest.displayName = 'proto.DatasetRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DatasetRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DatasetRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DatasetRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestparamsMap: (f = msg.getRequestparamsMap()) ? f.toObject(includeInstance, undefined) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DatasetRequest}
 */
proto.DatasetRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DatasetRequest;
  return proto.DatasetRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DatasetRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DatasetRequest}
 */
proto.DatasetRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.DatasetRequest.Dataset} */ (reader.readEnum());
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 3:
      var value = /** @type {!proto.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = msg.getRequestparamsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DatasetRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DatasetRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DatasetRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestparamsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
};


/**
 * @enum {number}
 */
proto.DatasetRequest.Dataset = {
  HOSPITALS: 0,
  DAMS: 1,
  ELECTRICAL_SUBSTATIONS: 2,
  TRANSMISSION_LINES: 3,
  NATURAL_GAS_PIPELINES: 4,
  POWER_PLANTS: 5,
  FIRE_STATIONS: 6,
  FLOOD_ZONES: 7
};

/**
 * optional Dataset dataset = 1;
 * @return {!proto.DatasetRequest.Dataset}
 */
proto.DatasetRequest.prototype.getDataset = function() {
  return /** @type {!proto.DatasetRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.DatasetRequest.Dataset} value */
proto.DatasetRequest.prototype.setDataset = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string requestGeoJson = 2;
 * @return {string}
 */
proto.DatasetRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.DatasetRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.SpatialOp}
 */
proto.DatasetRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SpatialOp} value */
proto.DatasetRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * map<string, string> requestParams = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.DatasetRequest.prototype.getRequestparamsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


proto.DatasetRequest.prototype.clearRequestparamsMap = function() {
  this.getRequestparamsMap().clear();
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DatasetResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DatasetResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DatasetResponse.displayName = 'proto.DatasetResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DatasetResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DatasetResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DatasetResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DatasetResponse}
 */
proto.DatasetResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DatasetResponse;
  return proto.DatasetResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DatasetResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DatasetResponse}
 */
proto.DatasetResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DatasetResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DatasetResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DatasetResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.DatasetResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DatasetResponse.prototype.setResponse = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.OsmRequest.repeatedFields_, null);
};
goog.inherits(proto.OsmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OsmRequest.displayName = 'proto.OsmRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.OsmRequest.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    dataset: jspb.Message.getFieldWithDefault(msg, 1, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 2, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestparamsList: jspb.Message.toObjectList(msg.getRequestparamsList(),
    proto.OsmRequest.OsmRequestParam.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmRequest}
 */
proto.OsmRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmRequest;
  return proto.OsmRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmRequest}
 */
proto.OsmRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.OsmRequest.Dataset} */ (reader.readEnum());
      msg.setDataset(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 3:
      var value = /** @type {!proto.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = new proto.OsmRequest.OsmRequestParam;
      reader.readMessage(value,proto.OsmRequest.OsmRequestParam.deserializeBinaryFromReader);
      msg.addRequestparams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDataset();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestparamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.OsmRequest.OsmRequestParam.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.OsmRequest.Dataset = {
  POINTS: 0,
  LINES: 1,
  MULTI_LINES: 2,
  MULTI_POLYGONS: 3,
  OTHER: 4,
  ALL: 5
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmRequest.OsmRequestParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmRequest.OsmRequestParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OsmRequest.OsmRequestParam.displayName = 'proto.OsmRequest.OsmRequestParam';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmRequest.OsmRequestParam.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmRequest.OsmRequestParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmRequest.OsmRequestParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmRequest.OsmRequestParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmRequest.OsmRequestParam}
 */
proto.OsmRequest.OsmRequestParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmRequest.OsmRequestParam;
  return proto.OsmRequest.OsmRequestParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmRequest.OsmRequestParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmRequest.OsmRequestParam}
 */
proto.OsmRequest.OsmRequestParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmRequest.OsmRequestParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmRequest.OsmRequestParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmRequest.OsmRequestParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmRequest.OsmRequestParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.OsmRequest.OsmRequestParam.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OsmRequest.OsmRequestParam.prototype.setKey = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.OsmRequest.OsmRequestParam.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.OsmRequest.OsmRequestParam.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Dataset dataset = 1;
 * @return {!proto.OsmRequest.Dataset}
 */
proto.OsmRequest.prototype.getDataset = function() {
  return /** @type {!proto.OsmRequest.Dataset} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.OsmRequest.Dataset} value */
proto.OsmRequest.prototype.setDataset = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string requestGeoJson = 2;
 * @return {string}
 */
proto.OsmRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.OsmRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.SpatialOp}
 */
proto.OsmRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SpatialOp} value */
proto.OsmRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * repeated OsmRequestParam requestParams = 4;
 * @return {!Array<!proto.OsmRequest.OsmRequestParam>}
 */
proto.OsmRequest.prototype.getRequestparamsList = function() {
  return /** @type{!Array<!proto.OsmRequest.OsmRequestParam>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.OsmRequest.OsmRequestParam, 4));
};


/** @param {!Array<!proto.OsmRequest.OsmRequestParam>} value */
proto.OsmRequest.prototype.setRequestparamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.OsmRequest.OsmRequestParam=} opt_value
 * @param {number=} opt_index
 * @return {!proto.OsmRequest.OsmRequestParam}
 */
proto.OsmRequest.prototype.addRequestparams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.OsmRequest.OsmRequestParam, opt_index);
};


proto.OsmRequest.prototype.clearRequestparamsList = function() {
  this.setRequestparamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.OsmResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.OsmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.OsmResponse.displayName = 'proto.OsmResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.OsmResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.OsmResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.OsmResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.OsmResponse}
 */
proto.OsmResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.OsmResponse;
  return proto.OsmResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.OsmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.OsmResponse}
 */
proto.OsmResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.OsmResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.OsmResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.OsmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.OsmResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string response = 1;
 * @return {string}
 */
proto.OsmResponse.prototype.getResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.OsmResponse.prototype.setResponse = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CensusRequest.displayName = 'proto.CensusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusresolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    censusfeature: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CensusRequest}
 */
proto.CensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CensusRequest;
  return proto.CensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CensusRequest}
 */
proto.CensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CensusResolution} */ (reader.readEnum());
      msg.setCensusresolution(value);
      break;
    case 2:
      var value = /** @type {!proto.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 4:
      var value = /** @type {!proto.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusresolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution censusResolution = 1;
 * @return {!proto.CensusResolution}
 */
proto.CensusRequest.prototype.getCensusresolution = function() {
  return /** @type {!proto.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.CensusResolution} value */
proto.CensusRequest.prototype.setCensusresolution = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CensusFeature censusFeature = 2;
 * @return {!proto.CensusFeature}
 */
proto.CensusRequest.prototype.getCensusfeature = function() {
  return /** @type {!proto.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.CensusFeature} value */
proto.CensusRequest.prototype.setCensusfeature = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string requestGeoJson = 3;
 * @return {string}
 */
proto.CensusRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.CensusRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SpatialOp spatialOp = 4;
 * @return {!proto.SpatialOp}
 */
proto.CensusRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.SpatialOp} value */
proto.CensusRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CensusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CensusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CensusResponse.displayName = 'proto.CensusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CensusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CensusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CensusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CensusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CensusResponse}
 */
proto.CensusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CensusResponse;
  return proto.CensusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CensusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CensusResponse}
 */
proto.CensusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsegeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CensusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CensusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CensusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CensusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsegeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.CensusResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CensusResponse.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseGeoJson = 2;
 * @return {string}
 */
proto.CensusResponse.prototype.getResponsegeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CensusResponse.prototype.setResponsegeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DatasetEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DatasetEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DatasetEntry.displayName = 'proto.DatasetEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DatasetEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.DatasetEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DatasetEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DatasetEntry}
 */
proto.DatasetEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DatasetEntry;
  return proto.DatasetEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DatasetEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DatasetEntry}
 */
proto.DatasetEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DatasetEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DatasetEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DatasetEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DatasetEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string entry = 1;
 * @return {string}
 */
proto.DatasetEntry.prototype.getEntry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DatasetEntry.prototype.setEntry = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TargetedCensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TargetedCensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TargetedCensusRequest.displayName = 'proto.TargetedCensusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TargetedCensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TargetedCensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TargetedCensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetedCensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predicate: (f = msg.getPredicate()) && proto.Predicate.toObject(includeInstance, f),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TargetedCensusRequest}
 */
proto.TargetedCensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TargetedCensusRequest;
  return proto.TargetedCensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TargetedCensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TargetedCensusRequest}
 */
proto.TargetedCensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CensusResolution} */ (reader.readEnum());
      msg.setResolution(value);
      break;
    case 2:
      var value = new proto.Predicate;
      reader.readMessage(value,proto.Predicate.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    case 3:
      var value = /** @type {!proto.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TargetedCensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TargetedCensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TargetedCensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetedCensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Predicate.serializeBinaryToWriter
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution resolution = 1;
 * @return {!proto.CensusResolution}
 */
proto.TargetedCensusRequest.prototype.getResolution = function() {
  return /** @type {!proto.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.CensusResolution} value */
proto.TargetedCensusRequest.prototype.setResolution = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Predicate predicate = 2;
 * @return {?proto.Predicate}
 */
proto.TargetedCensusRequest.prototype.getPredicate = function() {
  return /** @type{?proto.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.Predicate, 2));
};


/** @param {?proto.Predicate|undefined} value */
proto.TargetedCensusRequest.prototype.setPredicate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TargetedCensusRequest.prototype.clearPredicate = function() {
  this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TargetedCensusRequest.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.SpatialOp}
 */
proto.TargetedCensusRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.SpatialOp} value */
proto.TargetedCensusRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string requestGeoJson = 4;
 * @return {string}
 */
proto.TargetedCensusRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TargetedCensusRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TargetedCensusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TargetedCensusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TargetedCensusResponse.displayName = 'proto.TargetedCensusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TargetedCensusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TargetedCensusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TargetedCensusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetedCensusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TargetedCensusResponse}
 */
proto.TargetedCensusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TargetedCensusResponse;
  return proto.TargetedCensusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TargetedCensusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TargetedCensusResponse}
 */
proto.TargetedCensusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsegeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TargetedCensusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TargetedCensusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TargetedCensusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TargetedCensusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsegeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.TargetedCensusResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TargetedCensusResponse.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseGeoJson = 2;
 * @return {string}
 */
proto.TargetedCensusResponse.prototype.getResponsegeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TargetedCensusResponse.prototype.setResponsegeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Predicate.displayName = 'proto.Predicate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusfeature: jspb.Message.getFieldWithDefault(msg, 1, 0),
    decade: jspb.Message.getFieldWithDefault(msg, 2, 0),
    comparisonop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    comparisonvalue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Predicate}
 */
proto.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Predicate;
  return proto.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Predicate}
 */
proto.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 2:
      var value = /** @type {!proto.Decade} */ (reader.readEnum());
      msg.setDecade(value);
      break;
    case 3:
      var value = /** @type {!proto.Predicate.ComparisonOperator} */ (reader.readEnum());
      msg.setComparisonop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setComparisonvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDecade();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getComparisonop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getComparisonvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.Predicate.ComparisonOperator = {
  EQUAL: 0,
  GREATER_THAN: 1,
  LESS_THAN: 2,
  GREATER_THAN_OR_EQUAL: 3,
  LESS_THAN_OR_EQUAL: 4
};

/**
 * optional CensusFeature censusFeature = 1;
 * @return {!proto.CensusFeature}
 */
proto.Predicate.prototype.getCensusfeature = function() {
  return /** @type {!proto.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.CensusFeature} value */
proto.Predicate.prototype.setCensusfeature = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Decade decade = 2;
 * @return {!proto.Decade}
 */
proto.Predicate.prototype.getDecade = function() {
  return /** @type {!proto.Decade} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.Decade} value */
proto.Predicate.prototype.setDecade = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ComparisonOperator comparisonOp = 3;
 * @return {!proto.Predicate.ComparisonOperator}
 */
proto.Predicate.prototype.getComparisonop = function() {
  return /** @type {!proto.Predicate.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.Predicate.ComparisonOperator} value */
proto.Predicate.prototype.setComparisonop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double comparisonValue = 4;
 * @return {number}
 */
proto.Predicate.prototype.getComparisonvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.Predicate.prototype.setComparisonvalue = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CompoundResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CompoundResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CompoundResponse.displayName = 'proto.CompoundResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CompoundResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.CompoundResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CompoundResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompoundResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    geojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CompoundResponse}
 */
proto.CompoundResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CompoundResponse;
  return proto.CompoundResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CompoundResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CompoundResponse}
 */
proto.CompoundResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CompoundResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CompoundResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CompoundResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompoundResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.CompoundResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.CompoundResponse.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string geoJson = 2;
 * @return {string}
 */
proto.CompoundResponse.prototype.getGeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CompoundResponse.prototype.setGeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CompoundRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.CompoundRequest.oneofGroups_);
};
goog.inherits(proto.CompoundRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CompoundRequest.displayName = 'proto.CompoundRequest';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.CompoundRequest.oneofGroups_ = [[1,2],[4,5]];

/**
 * @enum {number}
 */
proto.CompoundRequest.FirstpredicateCase = {
  FIRSTPREDICATE_NOT_SET: 0,
  FIRST_QUERY: 1,
  FIRST_COMPOUND_REQUEST: 2
};

/**
 * @return {proto.CompoundRequest.FirstpredicateCase}
 */
proto.CompoundRequest.prototype.getFirstpredicateCase = function() {
  return /** @type {proto.CompoundRequest.FirstpredicateCase} */(jspb.Message.computeOneofCase(this, proto.CompoundRequest.oneofGroups_[0]));
};

/**
 * @enum {number}
 */
proto.CompoundRequest.SecondpredicateCase = {
  SECONDPREDICATE_NOT_SET: 0,
  SECOND_QUERY: 4,
  SECOND_COMPOUND_REQUEST: 5
};

/**
 * @return {proto.CompoundRequest.SecondpredicateCase}
 */
proto.CompoundRequest.prototype.getSecondpredicateCase = function() {
  return /** @type {proto.CompoundRequest.SecondpredicateCase} */(jspb.Message.computeOneofCase(this, proto.CompoundRequest.oneofGroups_[1]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CompoundRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.CompoundRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CompoundRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompoundRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    firstQuery: (f = msg.getFirstQuery()) && proto.Query.toObject(includeInstance, f),
    firstCompoundRequest: (f = msg.getFirstCompoundRequest()) && proto.CompoundRequest.toObject(includeInstance, f),
    join: jspb.Message.getFieldWithDefault(msg, 3, 0),
    secondQuery: (f = msg.getSecondQuery()) && proto.Query.toObject(includeInstance, f),
    secondCompoundRequest: (f = msg.getSecondCompoundRequest()) && proto.CompoundRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CompoundRequest}
 */
proto.CompoundRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CompoundRequest;
  return proto.CompoundRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CompoundRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CompoundRequest}
 */
proto.CompoundRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Query;
      reader.readMessage(value,proto.Query.deserializeBinaryFromReader);
      msg.setFirstQuery(value);
      break;
    case 2:
      var value = new proto.CompoundRequest;
      reader.readMessage(value,proto.CompoundRequest.deserializeBinaryFromReader);
      msg.setFirstCompoundRequest(value);
      break;
    case 3:
      var value = /** @type {!proto.JoinOperator} */ (reader.readEnum());
      msg.setJoin(value);
      break;
    case 4:
      var value = new proto.Query;
      reader.readMessage(value,proto.Query.deserializeBinaryFromReader);
      msg.setSecondQuery(value);
      break;
    case 5:
      var value = new proto.CompoundRequest;
      reader.readMessage(value,proto.CompoundRequest.deserializeBinaryFromReader);
      msg.setSecondCompoundRequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CompoundRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CompoundRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CompoundRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CompoundRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFirstQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.Query.serializeBinaryToWriter
    );
  }
  f = message.getFirstCompoundRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CompoundRequest.serializeBinaryToWriter
    );
  }
  f = message.getJoin();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getSecondQuery();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Query.serializeBinaryToWriter
    );
  }
  f = message.getSecondCompoundRequest();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.CompoundRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional Query first_query = 1;
 * @return {?proto.Query}
 */
proto.CompoundRequest.prototype.getFirstQuery = function() {
  return /** @type{?proto.Query} */ (
    jspb.Message.getWrapperField(this, proto.Query, 1));
};


/** @param {?proto.Query|undefined} value */
proto.CompoundRequest.prototype.setFirstQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.CompoundRequest.oneofGroups_[0], value);
};


proto.CompoundRequest.prototype.clearFirstQuery = function() {
  this.setFirstQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CompoundRequest.prototype.hasFirstQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional CompoundRequest first_compound_request = 2;
 * @return {?proto.CompoundRequest}
 */
proto.CompoundRequest.prototype.getFirstCompoundRequest = function() {
  return /** @type{?proto.CompoundRequest} */ (
    jspb.Message.getWrapperField(this, proto.CompoundRequest, 2));
};


/** @param {?proto.CompoundRequest|undefined} value */
proto.CompoundRequest.prototype.setFirstCompoundRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.CompoundRequest.oneofGroups_[0], value);
};


proto.CompoundRequest.prototype.clearFirstCompoundRequest = function() {
  this.setFirstCompoundRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CompoundRequest.prototype.hasFirstCompoundRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional JoinOperator join = 3;
 * @return {!proto.JoinOperator}
 */
proto.CompoundRequest.prototype.getJoin = function() {
  return /** @type {!proto.JoinOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.JoinOperator} value */
proto.CompoundRequest.prototype.setJoin = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional Query second_query = 4;
 * @return {?proto.Query}
 */
proto.CompoundRequest.prototype.getSecondQuery = function() {
  return /** @type{?proto.Query} */ (
    jspb.Message.getWrapperField(this, proto.Query, 4));
};


/** @param {?proto.Query|undefined} value */
proto.CompoundRequest.prototype.setSecondQuery = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.CompoundRequest.oneofGroups_[1], value);
};


proto.CompoundRequest.prototype.clearSecondQuery = function() {
  this.setSecondQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CompoundRequest.prototype.hasSecondQuery = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional CompoundRequest second_compound_request = 5;
 * @return {?proto.CompoundRequest}
 */
proto.CompoundRequest.prototype.getSecondCompoundRequest = function() {
  return /** @type{?proto.CompoundRequest} */ (
    jspb.Message.getWrapperField(this, proto.CompoundRequest, 5));
};


/** @param {?proto.CompoundRequest|undefined} value */
proto.CompoundRequest.prototype.setSecondCompoundRequest = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.CompoundRequest.oneofGroups_[1], value);
};


proto.CompoundRequest.prototype.clearSecondCompoundRequest = function() {
  this.setSecondCompoundRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CompoundRequest.prototype.hasSecondCompoundRequest = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Query.displayName = 'proto.Query';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
    host: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0),
    collection: jspb.Message.getFieldWithDefault(msg, 3, ""),
    query: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Query;
  return proto.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Query}
 */
proto.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setHost(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollection(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHost();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getCollection();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string host = 1;
 * @return {string}
 */
proto.Query.prototype.getHost = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Query.prototype.setHost = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.Query.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Query.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string collection = 3;
 * @return {string}
 */
proto.Query.prototype.getCollection = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.Query.prototype.setCollection = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string query = 4;
 * @return {string}
 */
proto.Query.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.Query.prototype.setQuery = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.SpatialOp = {
  GEOWITHIN: 0,
  GEOINTERSECTS: 1
};

/**
 * @enum {number}
 */
proto.CensusFeature = {
  TOTALPOPULATION: 0,
  MEDIANHOUSEHOLDINCOME: 1,
  POPULATIONBYAGE: 2,
  MEDIANAGE: 3,
  POVERTY: 4,
  RACE: 5
};

/**
 * @enum {number}
 */
proto.IntraDatasetOp = {
  INTERSECTION: 0,
  UNION: 1,
  OVERLAP: 2
};

/**
 * @enum {number}
 */
proto.CensusResolution = {
  STATE: 0,
  COUNTY: 1,
  TRACT: 2,
  BLOCK: 3
};

/**
 * @enum {number}
 */
proto.Decade = {
  _2010: 0,
  _2000: 1,
  _1990: 2,
  _1980: 3
};

/**
 * @enum {number}
 */
proto.JoinOperator = {
  INNER_JOIN: 0,
  OUTER_JOIN: 1,
  LEFT_JOIN: 2,
  RIGHT_JOIN: 3
};

/**
 * @enum {number}
 */
proto.ComparisonOperator = {
  EQUAL: 0,
  GREATER_THAN: 1,
  LESS_THAN: 2,
  GREATER_THAN_OR_EQUAL: 3,
  LESS_THAN_OR_EQUAL: 4
};

goog.object.extend(exports, proto);
