/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var other_datasets_pb = require('./other_datasets_pb.js');
goog.exportSymbol('proto.census.CensusFeature', null, global);
goog.exportSymbol('proto.census.CensusResolution', null, global);
goog.exportSymbol('proto.census.DatasetEntry', null, global);
goog.exportSymbol('proto.census.Decade', null, global);
goog.exportSymbol('proto.census.IntraDatasetOp', null, global);
goog.exportSymbol('proto.census.MultiDatasetQuery', null, global);
goog.exportSymbol('proto.census.Predicate', null, global);
goog.exportSymbol('proto.census.Predicate.ComparisonOperator', null, global);
goog.exportSymbol('proto.census.SpatialOp', null, global);
goog.exportSymbol('proto.census.SpatialRequest', null, global);
goog.exportSymbol('proto.census.SpatialResponse', null, global);
goog.exportSymbol('proto.census.TargetedCensusRequest', null, global);
goog.exportSymbol('proto.census.TargetedCensusResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.SpatialRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.SpatialRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.SpatialRequest.displayName = 'proto.census.SpatialRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.SpatialRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.census.SpatialRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.SpatialRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.SpatialRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusresolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    censusfeature: jspb.Message.getFieldWithDefault(msg, 2, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 3, ""),
    spatialop: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.SpatialRequest}
 */
proto.census.SpatialRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.SpatialRequest;
  return proto.census.SpatialRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.SpatialRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.SpatialRequest}
 */
proto.census.SpatialRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.census.CensusResolution} */ (reader.readEnum());
      msg.setCensusresolution(value);
      break;
    case 2:
      var value = /** @type {!proto.census.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    case 4:
      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.SpatialRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.SpatialRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.SpatialRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.SpatialRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusresolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution censusResolution = 1;
 * @return {!proto.census.CensusResolution}
 */
proto.census.SpatialRequest.prototype.getCensusresolution = function() {
  return /** @type {!proto.census.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.census.CensusResolution} value */
proto.census.SpatialRequest.prototype.setCensusresolution = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional CensusFeature censusFeature = 2;
 * @return {!proto.census.CensusFeature}
 */
proto.census.SpatialRequest.prototype.getCensusfeature = function() {
  return /** @type {!proto.census.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.census.CensusFeature} value */
proto.census.SpatialRequest.prototype.setCensusfeature = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string requestGeoJson = 3;
 * @return {string}
 */
proto.census.SpatialRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.census.SpatialRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional SpatialOp spatialOp = 4;
 * @return {!proto.census.SpatialOp}
 */
proto.census.SpatialRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.census.SpatialOp} value */
proto.census.SpatialRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.SpatialResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.SpatialResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.SpatialResponse.displayName = 'proto.census.SpatialResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.SpatialResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.census.SpatialResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.SpatialResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.SpatialResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    data: jspb.Message.getFieldWithDefault(msg, 1, ""),
    responsegeojson: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.SpatialResponse}
 */
proto.census.SpatialResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.SpatialResponse;
  return proto.census.SpatialResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.SpatialResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.SpatialResponse}
 */
proto.census.SpatialResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setResponsegeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.SpatialResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.SpatialResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.SpatialResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.SpatialResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getData();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getResponsegeojson();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string data = 1;
 * @return {string}
 */
proto.census.SpatialResponse.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.census.SpatialResponse.prototype.setData = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string responseGeoJson = 2;
 * @return {string}
 */
proto.census.SpatialResponse.prototype.getResponsegeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.census.SpatialResponse.prototype.setResponsegeojson = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.MultiDatasetQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.MultiDatasetQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.MultiDatasetQuery.displayName = 'proto.census.MultiDatasetQuery';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.MultiDatasetQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.census.MultiDatasetQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.MultiDatasetQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.MultiDatasetQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetedcensusrequest: (f = msg.getTargetedcensusrequest()) && proto.census.TargetedCensusRequest.toObject(includeInstance, f),
    secondarydataset: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.MultiDatasetQuery}
 */
proto.census.MultiDatasetQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.MultiDatasetQuery;
  return proto.census.MultiDatasetQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.MultiDatasetQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.MultiDatasetQuery}
 */
proto.census.MultiDatasetQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.census.TargetedCensusRequest;
      reader.readMessage(value,proto.census.TargetedCensusRequest.deserializeBinaryFromReader);
      msg.setTargetedcensusrequest(value);
      break;
    case 2:
      var value = /** @type {!proto.SecondaryDataset} */ (reader.readEnum());
      msg.setSecondarydataset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.MultiDatasetQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.MultiDatasetQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.MultiDatasetQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.MultiDatasetQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetedcensusrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.census.TargetedCensusRequest.serializeBinaryToWriter
    );
  }
  f = message.getSecondarydataset();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional TargetedCensusRequest targetedCensusRequest = 1;
 * @return {?proto.census.TargetedCensusRequest}
 */
proto.census.MultiDatasetQuery.prototype.getTargetedcensusrequest = function() {
  return /** @type{?proto.census.TargetedCensusRequest} */ (
    jspb.Message.getWrapperField(this, proto.census.TargetedCensusRequest, 1));
};


/** @param {?proto.census.TargetedCensusRequest|undefined} value */
proto.census.MultiDatasetQuery.prototype.setTargetedcensusrequest = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.census.MultiDatasetQuery.prototype.clearTargetedcensusrequest = function() {
  this.setTargetedcensusrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.census.MultiDatasetQuery.prototype.hasTargetedcensusrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SecondaryDataset secondaryDataset = 2;
 * @return {!proto.SecondaryDataset}
 */
proto.census.MultiDatasetQuery.prototype.getSecondarydataset = function() {
  return /** @type {!proto.SecondaryDataset} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.SecondaryDataset} value */
proto.census.MultiDatasetQuery.prototype.setSecondarydataset = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.DatasetEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.DatasetEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.DatasetEntry.displayName = 'proto.census.DatasetEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.DatasetEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.census.DatasetEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.DatasetEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.DatasetEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    entry: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.DatasetEntry}
 */
proto.census.DatasetEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.DatasetEntry;
  return proto.census.DatasetEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.DatasetEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.DatasetEntry}
 */
proto.census.DatasetEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.DatasetEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.DatasetEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.DatasetEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.DatasetEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntry();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string entry = 1;
 * @return {string}
 */
proto.census.DatasetEntry.prototype.getEntry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.census.DatasetEntry.prototype.setEntry = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.TargetedCensusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.TargetedCensusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.TargetedCensusRequest.displayName = 'proto.census.TargetedCensusRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.TargetedCensusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.census.TargetedCensusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.TargetedCensusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.TargetedCensusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    resolution: jspb.Message.getFieldWithDefault(msg, 1, 0),
    predicate: (f = msg.getPredicate()) && proto.census.Predicate.toObject(includeInstance, f),
    spatialop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    requestgeojson: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.TargetedCensusRequest}
 */
proto.census.TargetedCensusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.TargetedCensusRequest;
  return proto.census.TargetedCensusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.TargetedCensusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.TargetedCensusRequest}
 */
proto.census.TargetedCensusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.census.CensusResolution} */ (reader.readEnum());
      msg.setResolution(value);
      break;
    case 2:
      var value = new proto.census.Predicate;
      reader.readMessage(value,proto.census.Predicate.deserializeBinaryFromReader);
      msg.setPredicate(value);
      break;
    case 3:
      var value = /** @type {!proto.census.SpatialOp} */ (reader.readEnum());
      msg.setSpatialop(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRequestgeojson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.TargetedCensusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.TargetedCensusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.TargetedCensusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.TargetedCensusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResolution();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPredicate();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.census.Predicate.serializeBinaryToWriter
    );
  }
  f = message.getSpatialop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getRequestgeojson();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional CensusResolution resolution = 1;
 * @return {!proto.census.CensusResolution}
 */
proto.census.TargetedCensusRequest.prototype.getResolution = function() {
  return /** @type {!proto.census.CensusResolution} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.census.CensusResolution} value */
proto.census.TargetedCensusRequest.prototype.setResolution = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Predicate predicate = 2;
 * @return {?proto.census.Predicate}
 */
proto.census.TargetedCensusRequest.prototype.getPredicate = function() {
  return /** @type{?proto.census.Predicate} */ (
    jspb.Message.getWrapperField(this, proto.census.Predicate, 2));
};


/** @param {?proto.census.Predicate|undefined} value */
proto.census.TargetedCensusRequest.prototype.setPredicate = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.census.TargetedCensusRequest.prototype.clearPredicate = function() {
  this.setPredicate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.census.TargetedCensusRequest.prototype.hasPredicate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SpatialOp spatialOp = 3;
 * @return {!proto.census.SpatialOp}
 */
proto.census.TargetedCensusRequest.prototype.getSpatialop = function() {
  return /** @type {!proto.census.SpatialOp} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.census.SpatialOp} value */
proto.census.TargetedCensusRequest.prototype.setSpatialop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string requestGeoJson = 4;
 * @return {string}
 */
proto.census.TargetedCensusRequest.prototype.getRequestgeojson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.census.TargetedCensusRequest.prototype.setRequestgeojson = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.TargetedCensusResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.TargetedCensusResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.TargetedCensusResponse.displayName = 'proto.census.TargetedCensusResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.TargetedCensusResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.census.TargetedCensusResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.TargetedCensusResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.TargetedCensusResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    spatialresponse: (f = msg.getSpatialresponse()) && proto.census.SpatialResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.TargetedCensusResponse}
 */
proto.census.TargetedCensusResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.TargetedCensusResponse;
  return proto.census.TargetedCensusResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.TargetedCensusResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.TargetedCensusResponse}
 */
proto.census.TargetedCensusResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.census.SpatialResponse;
      reader.readMessage(value,proto.census.SpatialResponse.deserializeBinaryFromReader);
      msg.setSpatialresponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.TargetedCensusResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.TargetedCensusResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.TargetedCensusResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.TargetedCensusResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpatialresponse();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.census.SpatialResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional SpatialResponse spatialResponse = 1;
 * @return {?proto.census.SpatialResponse}
 */
proto.census.TargetedCensusResponse.prototype.getSpatialresponse = function() {
  return /** @type{?proto.census.SpatialResponse} */ (
    jspb.Message.getWrapperField(this, proto.census.SpatialResponse, 1));
};


/** @param {?proto.census.SpatialResponse|undefined} value */
proto.census.TargetedCensusResponse.prototype.setSpatialresponse = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.census.TargetedCensusResponse.prototype.clearSpatialresponse = function() {
  this.setSpatialresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.census.TargetedCensusResponse.prototype.hasSpatialresponse = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.census.Predicate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.census.Predicate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.census.Predicate.displayName = 'proto.census.Predicate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.census.Predicate.prototype.toObject = function(opt_includeInstance) {
  return proto.census.Predicate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.census.Predicate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.Predicate.toObject = function(includeInstance, msg) {
  var f, obj = {
    censusfeature: jspb.Message.getFieldWithDefault(msg, 1, 0),
    decade: jspb.Message.getFieldWithDefault(msg, 2, 0),
    comparisonop: jspb.Message.getFieldWithDefault(msg, 3, 0),
    comparisonvalue: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.census.Predicate}
 */
proto.census.Predicate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.census.Predicate;
  return proto.census.Predicate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.census.Predicate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.census.Predicate}
 */
proto.census.Predicate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.census.CensusFeature} */ (reader.readEnum());
      msg.setCensusfeature(value);
      break;
    case 2:
      var value = /** @type {!proto.census.Decade} */ (reader.readEnum());
      msg.setDecade(value);
      break;
    case 3:
      var value = /** @type {!proto.census.Predicate.ComparisonOperator} */ (reader.readEnum());
      msg.setComparisonop(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setComparisonvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.census.Predicate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.census.Predicate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.census.Predicate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.census.Predicate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCensusfeature();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDecade();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getComparisonop();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getComparisonvalue();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.census.Predicate.ComparisonOperator = {
  EQUAL: 0,
  GREATER_THAN: 1,
  LESS_THAN: 2,
  GREATER_THAN_OR_EQUAL: 3,
  LESS_THAN_OR_EQUAL: 4
};

/**
 * optional CensusFeature censusFeature = 1;
 * @return {!proto.census.CensusFeature}
 */
proto.census.Predicate.prototype.getCensusfeature = function() {
  return /** @type {!proto.census.CensusFeature} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.census.CensusFeature} value */
proto.census.Predicate.prototype.setCensusfeature = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Decade decade = 2;
 * @return {!proto.census.Decade}
 */
proto.census.Predicate.prototype.getDecade = function() {
  return /** @type {!proto.census.Decade} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.census.Decade} value */
proto.census.Predicate.prototype.setDecade = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional ComparisonOperator comparisonOp = 3;
 * @return {!proto.census.Predicate.ComparisonOperator}
 */
proto.census.Predicate.prototype.getComparisonop = function() {
  return /** @type {!proto.census.Predicate.ComparisonOperator} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.census.Predicate.ComparisonOperator} value */
proto.census.Predicate.prototype.setComparisonop = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional double comparisonValue = 4;
 * @return {number}
 */
proto.census.Predicate.prototype.getComparisonvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.census.Predicate.prototype.setComparisonvalue = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.census.SpatialOp = {
  GEOWITHIN: 0,
  GEOINTERSECTS: 1
};

/**
 * @enum {number}
 */
proto.census.CensusFeature = {
  TOTALPOPULATION: 0,
  MEDIANHOUSEHOLDINCOME: 1,
  POPULATIONBYAGE: 2,
  MEDIANAGE: 3,
  POVERTY: 4,
  RACE: 5
};

/**
 * @enum {number}
 */
proto.census.IntraDatasetOp = {
  INTERSECTION: 0,
  UNION: 1,
  OVERLAP: 2
};

/**
 * @enum {number}
 */
proto.census.CensusResolution = {
  STATE: 0,
  COUNTY: 1,
  TRACT: 2
};

/**
 * @enum {number}
 */
proto.census.Decade = {
  _2010: 0,
  _2000: 1,
  _1990: 2,
  _1980: 3
};

goog.object.extend(exports, proto.census);
